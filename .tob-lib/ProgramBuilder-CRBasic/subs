#!/usr/local/bin/bash

# subs: compose subroutines for final program 

warn() { printf "%s\n" "$@"; } 
error() { printf "%s\n" "$@"; exit 1; } 
shopt -s nocasematch nullglob

ob=.
test -n "$1" && ob="$1"

## resolve search directories
resolve_search_paths() {
    # if target (^ or .^) resolves as a directory, it's a prototype:
    test -d "$1" || {
        # otherwise, if it exists as a link it's a thinobject type:
        test -L "$1" && return 0
        return 1
        }
    search_paths+=("$1")
    # recurse to follow $1/^ or $1/.^ links:
    resolve_search_paths $1/^ || resolve_search_paths $1/.^ || return 1
    }
declare -a search_paths
resolve_search_paths $ob

resolve_attr() {
    for attr in "${search_paths[@]}"; do
        attr+=/$1
        test -e $attr && return 
    done
    return 1
    }

resolve_attr @order || error "no @order file found"
order=$attr

resolve_symvar() {
    for attr in "${search_paths[@]}"; do
        attr+=/$1
        test -L $attr && test ! -e $attr && return 
    done
    return 1
}

reduce_params() {
    ## in global var line, reduce {{TAG,VAL}} to params[TAG] or VAL
    local buf="$line" tag val
    line="${buf%%{{*}"
    buf="${buf#*{{}"
    ## return FALSE if no parameter substituion is needed
    [[ "$line" == "$buf" ]] && return 1
    tag="${buf%%:*}"
    buf="${buf#*:}"
    val="${buf%%\}\}*}"
    buf="${buf#*\}\}}"
    line+="${params[$tag]-$val}$buf"
    # recurse until no more expansion remain:
    reduce_params "$line" || return 0
}

declare component_dir
declare -A params
for component in $(<$order); do
    resolve_attr "$component" || continue
    component_dir="$attr"

    if resolve_symvar ${component}:; then
        for param in $(symvar $attr); do
            params[${param%:*}]=${param#*:}
        done
    fi

    for sub in $component_dir/@sub:*; do
        name=${sub##*:}
        [[ -n "$BUILD_SHOW_ID" ]] && 
            printf "' %s:%s()\n" "$component" "$name"
      # cat $sub
        while IFS=  read -r line; do 
            reduce_params "$line"
            printf "%s\n" "$line"
        done < "$sub"
        printf "\n"
    done
done

