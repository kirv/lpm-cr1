#!/usr/local/bin/bash

# programs: compose component program chunks into final program 

warn() { printf "%s\n" "$@" >&2; } 
error() { warn "$@"; exit 1; } 
shopt -s nocasematch nullglob

ob=.
test -n "$1" && ob="$1"

## resolve search directories
resolve_search_paths() {
    # if target (^ or .^) resolves as a directory, it's a prototype:
    test -d "$1" || {
        # otherwise, if it exists as a link it's a thinobject type:
        test -L "$1" && return 0
        return 1
    }
    search_paths+=("$1")
    # recurse to follow $1/^ or $1/.^ links:
    resolve_search_paths $1/^ || resolve_search_paths $1/.^ || return 1
}
declare -a search_paths
resolve_search_paths $ob

resolve_attr() {
    for attr in "${search_paths[@]}"; do
        attr+=/$1
        test -e $attr && return 
    done
    return 1
}

resolve_attr @order || error "no @order file found"
order=$attr

resolve_symvar() {
    for attr in "${search_paths[@]}"; do
        attr+=/$1
        test -L $attr && test ! -e $attr && return 
    done
    return 1
}

# store each scan value in the scans array:
declare scan
declare -a scans
scans=()

# store data for each scan in the s associative array;
# - s[P] stores the number of lines stored for scan P
# - s[P.M] stores line M of scan P
declare -A s
s=()

declare -i n

# store patterns for regex matching
declare -A pat
pat[beginprog]="^ *beginprog"
pat[endprog]="^ *endprog"
pat[scan]="^ *scan *\("
pat[nextscan]="^ *nextscan"
pat[calltable]="^ *calltable"

for component in $(<$order); do
    resolve_attr "$component" || continue

    for file in $attr/@prog:*; do
        scan="${file#*/@prog:}"

        # s[scan] is the number of lines already stored
        n=${s[$scan]}

        ((n==0)) && scans+=($scan)

        [[ -n $BUILD_SHOW_ID ]] && {
            n+=1
            s[$scan.$n]="        ' $component:"
        }

        while IFS= read -r line; do

          # printf "$line\n"

            [[ "$line" =~ ${pat[beginprog]} ]] && continue
            [[ "$line" =~ ${pat[endprog]} ]] && continue
            [[ "$line" =~ ${pat[scan]} ]] && continue
            [[ "$line" =~ ${pat[nextscan]} ]] && {
                n+=1
                s[$scan.$n]="    "
                s[$scan]=$n
                continue
            }

            # accumulate entries for the final table:
            n+=1
            s[$scan.$n]="$line"
            s[$scan]=$n

        done < $file

    done

done

# check the number of scan intervals to output to the program:
((${#scans[@]}>4)) && error "too many scan intervals: ${#scans[@]}"

printf "\nbeginProg\n"

# output init code first!
[[ -n ${scans[init]} ]] && {
    scan=init
    for (( n=1; n<=${s[$scan]}; n+=1 )); do
        line="${s[$scan.$n]}"
        printf "%s\n" "$line"
    done
    printf "\n"
}

declare -a scan_order

if resolve_symvar scan-order; then
    scan_order=( $(symvar $attr) )
else    
    scan_order=( ${scans[*]} )
fi

# output each scan, but skip init (which could be out of order)
declare -i slowseq
for scan in "${scan_order[@]}"; do
    [[ $scan == init ]] && continue
  # printf "DEBUG  %s: %s\n" "$scan" "${s[scan]}"

    ((slowseq>0)) && printf "    slowSequence\n"

    printf "    scan(%s,sec,0,0)\n" $scan
    
  # printf "DEBUG:\t<%s>\n" "${s[@]}"
    for (( n=1; n<=${s[$scan]}; n+=1 )); do
        line="${s[$scan.$n]}"
        printf "%s\n" "$line"
    done

    printf "    nextScan\n"
    printf "\n"
    slowseq+=1
done

printf "endProg\n"
