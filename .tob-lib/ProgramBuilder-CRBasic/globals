#!/usr/local/bin/bash

# globals: compose global variables, aliases, units for final program 

# warn() { printf "%s\n" "$@" >&2; } 
warn() { printf "%s\n" "$@"; } 
error() { warn "$@"; exit 1; } 

ob=.
test -n "$1" && ob="$1"

## resolve search directories
resolve_search_paths() {
    # if target (^ or .^) resolves as a directory, it's a prototype:
    test -d "$1" || {
        # otherwise, if it exists as a link it's a thinobject type:
        test -L "$1" && return 0
        return 1
        }
    search_paths+=("$1")
    # recurse to follow $1/^ or $1/.^ links:
    resolve_search_paths $1/^ || resolve_search_paths $1/.^ || return 1
    }
declare -a search_paths
resolve_search_paths $ob

resolve_attr() {
    for attr in "${search_paths[@]}"; do
        attr+=/$1
        test -e $attr && return 
    done
    return 1
    }

resolve_attr @order || error "no @order file found"
order=$attr

resolve_symvar() {
    for attr in "${search_paths[@]}"; do
        attr+=/$1
        test -L $attr && test ! -e $attr && return 
    done
    return 1
}

# scan and read any alias symvars:
declare -A aliases
for symvar in $ob/alias:*; do
    test -L $symvar || continue
    test -e $symvar && continue
    alias=${symvar#*alias:}
    aliases[$alias]="$(symvar $symvar)"
done

reduce_params() {
    ## in global var line, reduce {{TAG,VAL}} to params[TAG] or VAL
    local buf="$line" tag val
    line="${buf%%{{*}"
    buf="${buf#*{{}"
    ## return FALSE if no parameter substituion is needed
    [[ "$line" == "$buf" ]] && return 1
    tag="${buf%%:*}"
    buf="${buf#*:}"
    val="${buf%%\}\}*}"
    buf="${buf#*\}\}}"
    line+="${params[$tag]-$val}$buf"
    # recurse until no more expansion remain:
    reduce_params "$line" || return 0
}

shopt -s nocasematch

declare globals_list
declare -A params
declare line
for component in $(<$order); do
    resolve_attr $component/@globals || continue
    globals_list="$attr"

    if resolve_symvar ${component}:; then
        for param in $(symvar $attr); do
            params[${param%:*}]=${param#*:}
        done
    fi

    [[ -n "$BUILD_SHOW_ID" ]] && printf "' %s:\n" "$component"

    while IFS= read -r line; do
        reduce_params "${line%$'\r'}"
        printf "%s\n" "$line"
        # add alias statement if a matching public variable is seen:
        line="${line## }"
        test "${line#public }" = "$line" && continue
        padding="${line%public *}"
        line="${line#public }"
        # BUG: this simple parser fails with 'public foo as boolean', etc.
        for var in ${line//,/ }; do
            var="${var%(*}"
            # HACK: end scanning if ':' is seen; e.g.: public foo : units foo = bar
            [[ $var == : ]] && break
            test -n "${aliases[$var]}" || continue
            printf "%salias %s = %s\n" "$padding" $var "${aliases[$var]}"
        done
    
    done < $globals_list
    printf "\n"
done
