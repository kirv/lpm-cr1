#!/usr/local/bin/bash

# datatables: compose datatables for final program 

warn() { printf "%s\n" "$@" >&2; }
error() { warn "$@"; exit 1; } 

shopt -s nocasematch nullglob

ob=.
test -n "$1" && ob="$1"

## resolve search directories
resolve_search_paths() {
    # if target (^ or .^) resolves as a directory, it's a prototype:
    test -d "$1" || {
        # otherwise, if it exists as a link it's a thinobject type:
        test -L "$1" && return 0
        return 1
        }
    search_paths+=("$1")
    # recurse to follow $1/^ or $1/.^ links:
    resolve_search_paths $1/^ || resolve_search_paths $1/.^ || return 1
    }
declare -a search_paths
resolve_search_paths $ob

resolve_attr() {
    for attr in "${search_paths[@]}"; do
        attr+=/$1
        test -e $attr && return 
    done
    return 1
    }

resolve_attr @order || error "no @order file found"
order=$attr

resolve_symvar() {
    for attr in "${search_paths[@]}"; do
        attr+=/$1
        test -L $attr && test ! -e $attr && return 
    done
    return 1
}

reduce_params() {
    ## in global var entry, reduce {{TAG,VAL}} to params[TAG] or VAL
    local buf="$entry" tag val
    entry="${buf%%{{*}"
    buf="${buf#*{{}"
    ## return FALSE if no parameter substituion is needed
    [[ "$entry" == "$buf" ]] && return 1
    tag="${buf%%:*}"
    buf="${buf#*:}"
    val="${buf%%\}\}*}"
    buf="${buf#*\}\}}"
    entry+="${params[$tag]-$val}$buf"
    # recurse until no more expansion remain:
    reduce_params "$entry" || return 0
}

declare -a tables
tables=()

declare -A t
t=()

declare -i n init

# store patterns for regex matching
declare -A pat
pat[endtable]="^ *endtable"
pat[data]="^data"
declare dt

init_datatable() {
    local table=${1%:} && shift
    local param
    local -A params
    local key
    for param in "$@"; do
        key=${param%:*}
        params[${key,,}]=${param#*:}
    done
    tables+=($table)
    # generate datatable() statement:
    t[$table.1]="dataTable($table,"
    if [[ -n ${params[trigvar]} ]]; then
        t[$table.1]+="${params[trigvar]},"
    else
        t[$table.1]+="1,"
    fi
    if [[ -n ${params[size]} ]]; then
        t[$table.1]+="${params[size]})"
    else
        t[$table.1]+="-1)"
    fi
    t[$table]=1
    # generate datainterval() statement, but only look for interval!
    if [[ -n ${params[interval]} ]]; then
        t[$table.2]="datainterval(0,${params[interval]},sec,0)"
        t[$table]=2
    fi
}

## handle datatable declarations
for dt in $ob/datatable-*:; do
    init_datatable "${dt##*-}" $(symvar $dt)
done

declare component_object
for component in $(<$order); do
    resolve_attr "$component" || continue
    component_object="$attr"

    declare -A params
    if resolve_symvar ${component}:; then
        for param in $(symvar $attr); do
            params[${param%:*}]=${param#*:}
        done
    fi

    ## handle datatable specifiers in each component:
    for dt in $component_object/@datatable:*; do
        table=${dt##*:}
      # printf "'    %20s\t%s\n" "$table" "$dt"

        n=${t[$table]}
        if (( n == 0 )); then
            init=1
            tables+=($table)
            t[$table]=$n
            t[$table.USEDBY]+="$component "
        else
            init=0
            t[$table.USEDBY]+="$component "
        fi

        while read entry; do
          # printf "\t%s\n" "$entry"
            reduce_params "$entry"

            # cull all endTable statements:
            [[ "$entry" =~ ${pat[endtable]} ]] && continue

            # cull all datatable and datainterval statements after the first:
            (( init == 0 )) && [[ "$entry" =~ ${pat[data]} ]] && continue

            # accumulate entries for the final table, but strip leading spaces:
            n+=1
            t[$table.$n]="${entry## *}"
            t[$table]=$n

        done < $dt

    done
done

for table in "${tables[@]}"; do
    [[ -n "$BUILD_SHOW_ID" ]] && 
        printf "' %s: %s\n" "$table" "${t[$table.USEDBY]}"
    printf "%s\n" "${t[$table.1]}"
    for ((n=2; n<=${t[$table]}; n+=1)); do
        printf "    %s\n" "${t[$table.$n]}"
    done
    printf "%s\n" "endTable"
    printf "\n"
done

