NAME
    ProgramBuilder-CRBasic

DESCRIPTION
    ProgramBuilder-CRBasic is a thinobject type for building or
    composing programs for Campbell Scientific dataloggers in the
    CRBasic language.

    An object of this type contains components and properties that
    define the program text that will be generated by the 'build'
    method.

COMPONENTS
    A component of a datalogger program represents a subset of the
    program for a specific purpose, e.g., to provide code for a
    particular sensor.  The component includes list properties --
    text files with prefix '@' -- that are named to associate with
    methods that generate 'chunks' of the program.

    A component can be a directory in the builder object, or can
    be a symlink to a component in a prototype object.

PROPERTIES
    ^   The ^ symlink identifies the ProgramBuilder-CRBasic type
        directly (as a non-resolving symlink) or indirectly as a
        symlink to a prototype object of the type.

    @order
        The @order file lists components to be included in the
        generated program.

METHODS
    build
        The build method generates the complete program text, taking
        several optional arguments, then calling 'chunk handler' methods
        in turn.

        The build method has several options; see build --help.

METHODS, CHUNK HANDLERS

    constants-table
        component property: @constants-table
        object symvars: FOO -> =VALUE replaces FOO value from @constatnts-table

        CRBasic constants declared in a constTable block can be edited
        using a keypad or other terminal connection to the datalogger.

            constTable
                const NAME = VALUE
                ...
            endConstTable

        See also next section:

    constants
        component property: @constants
        object symvars: FOO -> =VALUE replaces FOO value from @constatnts

        This method includes code found in '@constants' properties in each
        component listed in the '@order' property.  Constants look like:

            const NAME = VALUE

        where VALUE can be a quoted string or a numeric value.  Defined 
        constants can be used anywhere in the crbasic program where a value
        is expected, and VALUE will replace NAME.

        If defined in @constants or @constants-table, a symvar of the same 
        name can be declared in the build object, and the value will replace
        the value from the list property.

    globals
        component property: @globals
        object symvars: alias:NAME -> =VALUE
        
        This method includes code from @globals list property in any component
        listed in @order.

        Crbasic global declarations begin with the keyword 'dim' or 'public', 
        and define a variable name, optional array declaration, optional 
        crbasic data type, and optional value.  E.g., entries might look like:

            dim foo
            dim bar as string
            dim arr(5) as string * 60
            dim zip = 17
            dim zap(3) as string = { "one", "two", "three" }

        Variables declared with 'public' are visible at run-time via LoggerNet
        in the Public table, but otherwise are identical to 'dim' variables.

        Aliases are supported by crbasic to provide alternate names for variables
        or variable array elements, primarily for inclusion in datatable columns.
        From the above declarations, these could be declared:

            alias foo = myfoo
            alias arr() = first_el, second_el, third_el, fourth_el, fifth_el 

        Symvars in the build object with prefix alias:, e.g., alias:NAME, will be
        included in the program text if the associated NAME is declared as a global
        variable.  Aliases should be declared either in a @globals property or as
        alias:NAME symvars, but not both together.

    datatables
        component properties: @datatable:NAME
        object symvars: datatable-TABLE_NAME:
        object symvars: datafield-FIELD_NAME:

        Symvars declared in the build object as 'datatable-TABLE_NAME:' can be used
        to initialize datatable declarations in the generated program.  Supported 
        fields in the symvar value include:

            size:VALUE      -- -1 means: allocate all available memory
            interval:VALUE  -- VALUE is a number in seconds, optional suffix
            trigger:NAME

        Object symvars like 'datafield-TYPE:NAME' represent datatable column
        declarations, and are evaluated before any @datatable:NAME properties.
        Supported fields include:

            type:TYPE -- default type is fp2 (2-byte float)
            table:NAME
            tables:T1,T2,T3
            order:N

        '@datatable:NAME' component properties define column elements to be 
        included in the program datatable.  Elements can look like:
        
            sample(NAME, REPS, TYPE)
            average(NAME, REPS, TYPE)
            min(NAME, REPS, TYPE)
            ...

    subs
        component properties: @sub:NAME

    functions
        component properties: @function:NAME

    programs
        component properties: @prog:init
        component properties: @prog:SCAN

    after-notes
        component property: @after-notes
        build method option: --no-notes

        Text in any @after-notes properties is appended as comments after the
        end of the program.
        
    parameters
        build method option: --show-params

        If --show-params is included in the build invocation, component parameters
        are shown after the end of the program as comments.


UTILITY METHODS

    deploy

    strip

    print-lines-crlf

AUTHOR
    ken.irving@alaska.edu 2008-2018

