#!/usr/local/bin/bash

# constants: compose constants for final program 

error() { printf "%s\n"; exit 1; } 

macro_replace() {
    test -n "$2" || return
    prefix="$1"
    suffix="$2"

    key="${prefix#*const }"
    key="${key## *}"
    key="${key%% *}"

  # printf "TRY: replace[%s]\n" "$key"

    test -n "${replace[$key]}" || return
    value="${replace[$key]}"

    # replace $suffix in $line with $value

    quoted="${suffix%\"*}"


    test "$quoted" = "$suffix" || {
        # replacement value is in quotes:
        line="$prefix=${quoted%\"*}\"$value\""
        return
        }

    declare -i i
    i=0
    padding=
    while [[ "${suffix:$i:1}" = " " ]]; do
        padding+=" "
        i+=1
    done
    
    line="$prefix=$padding$value"
    }

shopt -s nocasematch

ob=.
test -n "$1" && ob="$1"

## resolve search directories
resolve_search_paths() {
    # if target (^ or .^) resolves as a directory, it's a prototype:
    test -d "$1" || {
        # otherwise, if it exists as a link it's a thinobject type:
        test -L "$1" && return 0
        return 1
        }
    search_paths+=("$1")
    # recurse to follow $1/^ or $1/.^ links:
    resolve_search_paths $1/^ || resolve_search_paths $1/.^ || return 1
    }
declare -a search_paths
resolve_search_paths $ob

resolve_attr() {
    for attr in "${search_paths[@]}"; do
        attr+=/$1
        test -e $attr && return 
    done
    return 1
    }

resolve_attr @order || error "no @order file found"
order=$attr

# scan and read any symvars:
declare -A replace
for symvar in $ob/*; do
    test -L $symvar || continue
    test -e $symvar && continue
    replace[${symvar##*/}]="$(symvar $symvar)"
done

const=()

for component in $(<$order); do
    resolve_attr $component/@constants || continue
    id=
    while read line; do
      # printf "\t%s\n" "$line"

        test -n "${#replace[@]}" && macro_replace "${line%=*}" "${line#*=}"

        [[ -n "$BUILD_SHOW_ID" && -z "$id" ]] && const+=("" "' $component:") && id=1

        const+=("$line")
    done < $attr
done

printf "%s\n" "${const[@]}"
printf "\n"

