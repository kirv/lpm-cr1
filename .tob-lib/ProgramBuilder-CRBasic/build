#!/usr/local/bin/bash

warn() { printf "%s\n" "$@" >&2; }
error() { warn "$@"; exit 1; }

print_header_lines() {
    ob="$1" && shift
    local -a hdrs
    [[ -L $ob/name && ! -e $ob/name ]] &&
        hdrs+=( "$(symvar $ob/name)" ) 
  # hdrs+=("crbasic program generated $(date)")
    printf "' %s\n" "${hdrs[@]}"
    printf "\n"
}

main() {
    local site
    local ext
    local -a chunks=(
        constants-table
        constants
        globals
        datatables
        functions
        subs
        programs
        after-notes
    )

    export BUILD_SHOW_ID=

    local save_output
    local -a sig
    local HEADER=1
    while [[ ${1:0:1} == "-" ]]; do
        case "$1" in
        --no-header) HEADER=; shift ;;
        --chunk | --chunks)     chunks=($2); shift ;;
        --show-id | --show-ids) export BUILD_SHOW_ID=1 ;;
        --no-notes)             export BUILD_NO_NOTES=1 ;;
        --save)                 save_output=1 ;;
        --help)                 awk '/^NAME/,/EOF/{print}' $0; exit ;; 
        -h)                     awk '/^SYNOPSIS/{getline;print}' $0; exit ;; 
        *)                      error "unknown option: $1" ;;
        esac
        shift
    done

    site="$1" && shift
    [[ -n $site ]] || site=.
    if [[ $(symvar logger) == cr1000x ]]; then
        ext=cr1x
    else
        ext=cr1
    fi
    
    
    ((save_output)) && {
        exec 1> $site/v/prog.$ext ||
            error "$site/v/ container does not exist; HINT: mkdir $site/v to use --save"
    }

    [[ -n $HEADER ]] &&
        print_header_lines "$site" | awk '{gsub(/\r/,""); printf("%s\r\n", $0)}'

    for chunk in "${chunks[@]}"; do  
        $chunk $site "$@"
    done | awk '{gsub(/\r/,""); printf("%s\r\n", $0)}'

    ((save_output)) && {
        exec 1>&-
        sig=($(csi-signature $site/v/prog.$ext))
        if [[ -e $site/v/psig-$sig.$ext ]] &&
            diff -q $site/v/prog.$ext $site/v/psig-$sig.$ext >/dev/null
        then
            rm $site/v/prog.$ext
            ln -sf psig-$sig.$ext $site/v/latest.$ext
            error "$site/v/psig-$sig.$ext already exists"
        else
            mv $site/v/prog.$ext $site/v/psig-$sig.$ext && 
                ln -sf psig-$sig.$ext $site/v/latest.$ext ||
                    error "unable to save $site/v/psig-$sig.$ext"
            warn "saved $site/v/psig-$sig.$ext"
        fi
    }
    
}

main "$@"

: << MANPAGE

NAME
    ProgramBuilder-CRBasic.build

SYNOPSIS
    build [-h] [--help] [--no-notes] [--show-id] [--chunk CHUNK[" CHUNK"...]] BUILDER-OBJECT

OPTIONS
    -h
        Show synopsis and exit.   

    --help
        Show manpage and exit.

    --no-header
        Suppress default action of including one or more header lines at the top of the program.

    --show-id
        Include a comment line identifying each component in the output.

    --no-notes
        Do not include @after-notes files (attributes) after end of program.

    --chunk CHUNK
    --chunk "CHUNK1 CHUNK2 ..."
        Run only the named chunk handlers

    --save
        Save output as v/psig-<PSIG>.cr1, and set symlink v/latest.cr1 to point to
        it.  Output directory v must exist (e.g., created manually).
        
DESCRIPTION
    Runs one or more 'chunk' handlers in order, where each handler composes code
    for its type contained in all 'components' inside the builder-object.  A builder-
    object looks like:
    
        ^ -> ProgramBuilder-CRBasic     -- thinobject type identifier
        component1/
            @constants
            @constants-table
            @globals
            @function:function_name
            @prog:60
            ...
        component2/
        ...

    The ^ symlink can alternatively point to a 'prototype object' which in turn has
    a ^ symlink identifying it as a ProgramBuilder-CRBasic object.  A thinobject type
    link does not resolve as a directory directly, but through a path provided by the 
    system.

    A thinobject type contains executable methods such as the program-builder 'chunk' 
    handlers, and can also contain other attributes.  A prototype object contains
    attributes but does not contain executable methods.

AUTHOR
    ken.irving@alaska.edu 2011-2018
MANPAGE
