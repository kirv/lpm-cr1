
constTable
    '' Geonor nameplate data:
    const GEONOR_NAME  = "Geonor Precipitation Gauge"
    const GEONOR_MODEL = "T-200B3 - 600mm"
    
    ' Geonor transducer serial numbers, pulse input channels:
    const GNR1_SN = 62417 : const GNR1__PP = 1
    const GNR2_SN = 62517 : const GNR2__PP = 2
    const GNR3_SN = 62617 : const GNR3__PP = 18
    
    ' Geonor transducer calibration constants:
    const GNR1_F0 = 1050.4 : const GNR1_A = 0.0164316 : const GNR1_B = 0.00000921903
    const GNR2_F0 = 1055.3 : const GNR2_A = 0.0165625 : const GNR2_B = 0.00000917252
    const GNR3_F0 = 1066.0 : const GNR3_A = 0.0165758 : const GNR3_B = 0.00000916086
    '' Geonor orifice RTD, Minco S665PFY40B, 1000 Ohms at 0C
    const GNR_RTD__SE = 7
    const GNR_RTD__EX = 2
    const GNR_RTD_R0 = 1000 ' Ohms
    
    const HTR_RELAY__P = 1      ' control port wired to solid state relay
    const HTR_SCAN_SEC = 2      ' control scan time, also minimum heater ON time
    const HTR_PERIOD_SEC = 30   ' duty cycle period for heater control
    '' a thermistor is taped to each Geonor vibrating wire transducer:
    const GNR1_THERM__SE = 4    ' GNR2 & GNR3 thermistors use the next two SE channels
    const GNR_THERMS__EX = 1    ' ... all thermistors use the same excitation channel
    const GNR_THERM_REF_R = 5000
    
    '' Steinhart & Hart coefficients for YSI 44004 thermistors, 2252 Ohms @ 25C:
    const THERM_A = 0.0014654354
    const THERM_B = 0.0002386780
    const THERM_C = 0.0000001000
    const LPM_NAME  = "Laser Precipitation Monitor"
    const LPM_MODEL = "5.4110.11.100"
    const LPM_ID = 0
    const LPM__PORT = Com1      ' C1=Tx (db9F-pin3), C2=Rx (db9F-pin2)
    
    const LPM_TELEGRAM = 8
    
endConstTable

const STX = chr(2)
const ETX = chr(3)
const LF = chr(10)
const CR = chr(13)
const SEMICOLON = ";"
const QUESTION = "?"
const BANG = "!"

public battery : units battery = Volts

public panelTemp : units panelTemp = degC

dim msg as string * 80

'' measured Geonor variables; f:frequency from pulseCount():
public gnr_F(3)     : units gnr_F = Hz     : alias gnr_F = g1_F, g2_F, g3_F
public gnr_Favg(3)

'' derived Geonor variables
public gnr_level(3) : units gnr_level = mm : alias gnr_level = g1_lvl,g2_lvl,g3_lvl 
public gnr_precip   : units gnr_precip = mm
public gnr_last_level 

dim Kw(3,3) as float = { _
GNR1_A, GNR1_B, GNR1_F0, _  '' Kw(1,1), Kw(1,2), Kw(1,3)
GNR2_A, GNR2_B, GNR2_F0, _  '' Kw(2,1), Kw(2,2), Kw(2,3)
GNR3_A, GNR3_B, GNR3_F0 _   '' Kw(3,1), Kw(3,2), Kw(3,3)
}

'' Geonor orifice RTD and heater
public gnr_orifice_T        : units gnr_orifice_T = deg C
public gnr_htr_period       : units gnr_htr_period = sec    '' 100% duty cycle time
public gnr_htr_on_ratio ' heater control setpoint, ratio of ON/OFF times
public gnr_htr_state as boolean

'' a thermistor is taped to each vibrating wire transducer:
public gnr_R(3)     : units gnr_R = Ohms  : alias gnr_R = g1_R, g2_R, g3_R
public gnr_Ravg(3)
public gnr_T(3)     : units gnr_T = Deg C  : alias gnr_T = g1_T, g2_T, g3_T
dim Kt(3) as float = { THERM_A, THERM_B, THERM_C }  '' Kt(1), Kt(2), Kt(3)
dim X(3)
dim i

public lpm_command as string * 10
public lpm_results as string * 2233
public lpm_err_msg as string * 80
public lpm_checksum as long 

public telegram_query_tries as long
dim telegram as string * 2233
dim LPM(524) as string

'' LPM diagnostic analog data from DD[1..13]
public LPM_state_vars(13) as float
alias LPM_state_vars = T_interior__C, T_laserdrvr__C, I_laser__mA, _
V_control__mV, V_optical__mV, V_sensor__V, I_laser_pane__mA, _
I_recvr_pane__mA, T_ambient__C, V_heating__V, I_housing__mA, _
I_heads__mA, I_carriers__mA

dim lpm_error_msgs(6) as string * 40 = { _     '' LPM error flags are in DX[1..6]
"static signal out of range", _
"laser temp (analog) too high", _
"laser temp (digital) too high", _
"laser current (analog) too high", _
"laser current (digital) too high", _
"sensor supply out of range" _
}

dim lpm_warning_msgs(9) as string * 40 = { _   '' LPM warning flags are in DX'[7..15]
"current: pane heating laser head", _
"current: pane heating receiver head", _
"temperature sensor", _
"heating supply out of allowed range", _
"current: heating housing", _
"current: heating heads", _
"current: heating carriers", _
"control output laser power high", _
"not used" _
}


DataTable(Diag,1,-1)
    average(1,battery,fp2,0)
    average(1,panelTemp,fp2,0)
endTable

dataTable("Messages",1,100)
    sample(1,progSig,uint2)
    sample(1,msg,string)
endTable

DataTable(Geonor_therms_R,1,-1)
    DataInterval(0,10,sec,0)
    Sample(1,progSig,uint2)
    sample (3,gnr_R,ieee4)
    Sample(1,progSig,uint2)
    sample (3,gnr_R,ieee4)
endTable

DataTable(Geonor_wires_freq,1,-1)
    DataInterval(0,10,sec,0)
    Sample(1,progSig,uint2)
    sample(3,gnr_F,ieee4)
endTable

DataTable(Geonor_derived_data,1,-1)
    DataInterval(0,60,sec,10)
    Sample(1,progSig,uint2)
    sample (3,gnr_level,FP2)
    average(1,gnr_orifice_T,fp2,false)
    average(1,gnr_htr_state,fp2,false)
endTable

DataTable(LPM,1,-1)
    dataInterval(0,60,Sec,10)
    sample(1,progSig,uint2)
    sample(1,telegram,String)
endTable

DataTable(LPM_state,1,-1)
    DataInterval(0,60,Sec,0)
    sample(1,progSig,uint2)
    sample(13,LPM_state_vars,fp2)
endTable

function calc_wire_depth(freq, A, B, F0)
    dim level
    level = 10*(A*(freq-F0) + B*(freq-F0)^2)
    return level
endfunction

function gnr_htr_strategy(AT, RH, orifice_T) as float
    '' TODO: DEFINE SOME SORT OF STRATEGY FOR CONTROLLING ORIFICE HEATER 
    '' OUTPUT RATIO SHOULD BE >=0 AND <=1
    return 0
endfunction

function htr_relay_control(ratio as float, period as long) as boolean
    dim elapsed as float
    dim ontime as float
    dim state as boolean
    elapsed = timer(HTR_SCAN_SEC,sec,4)                 '' read timer
    if elapsed = 0 then timer(HTR_SCAN_SEC,sec,0)       '' start timer if not running
    ontime = ratio * period
    if ontime < HTR_SCAN_SEC then ontime = 0
    if elapsed > period then timer(HTR_SCAN_SEC,sec,2)  '' restart timer
    if ontime < elapsed and ontime > 0 then state = 1 else state = 0
    portSet(HTR_RELAY__P,state)
endfunction

function read_Geonor_orifice_temp()
    dim x, T
    BrHalf (x,1,mV250,GNR_RTD__SE,GNR_RTD__EX,1,250,0,0,250,1.0,0)
    prt(T,1,x/(1-x),1,0)
    return T
endFunction

function calc_therm_T(R, A, B, C)
    dim T
    T = (1/(A + B*ln(R) + C*ln(R)^3)) - 273.15
    return T
endFunction

function lpm_calc_cksum(telegram as string * 2233) as long
    '' sum of non-checksum bytes plus checksum should result in 0x00 in last byte
    dim N as long, H as long, L as long, S as long, i as long
    N = len(telegram)
    H = ascii(telegram(1,1,N-5)) : L = ascii(telegram(1,1,N-4))
    S = 0 - H - L
    if H>=48 AND H<=57 then H-=48 else if H>=65 AND H<=70 then H-=55
    if L>=48 AND L<=57 then L-=48 else if L>=65 AND L<=70 then L-=55
    S += H*16 + L
    for i = 1 to N : S += ascii(telegram(1,1,i)) : next i
    return S
endFunction

function lpm_query(id as long, cmd as string, param as long) as string * 2233
    '' NOTE: param = -1 omits parameter
    dim value as long

    select case param
    case -1
        sprintf(lpm_command, "%02d%s", id, uppercase(cmd))
    case 0 to 99999
        sprintf(lpm_command, "%02d%s%05d", id, uppercase(cmd), param)
    case else
        lpm_err_msg = "rejected: invalid parameter" : lpm_command="" : lpm_results=""
        return QUESTION & QUESTION & lpm_err_msg
    endselect

    serialOut(LPM__PORT, CR & lpm_command & CR,"",0,0)
    
    select case uppercase(cmd)
    case "TR"
        serialIn(lpm_results,LPM__PORT,300,ETX,2233)
    case "??"
        serialIn(lpm_results,LPM__PORT,30,LF,2233)
        '' output begins with "User commands", so look for "U" below
    case else
        serialin(lpm_results,LPM__PORT,300,CR,80)
        lpm_results = mid(lpm_results, 1, len(lpm_results))
    endselect

    select case left(lpm_results,1)
    case BANG
        '' examples: "!00BR00005", "!00CI00002"
        select case mid(lpm_results,4,2)
        case "CI"
            lpm_err_msg = lpm_results
            select case right(lpm_results,1)
            case 0  : lpm_err_msg &= ": invalid parameter"      '' !00CI00000
            case 2  : lpm_err_msg &= ": unknown command"        '' !00CI00002
            case 4  : lpm_err_msg &= ": parameter out of range" '' !00CI00004
            case 8  : lpm_err_msg &= ": config mode required"   '' !00CI00008
            endselect
            return QUESTION & lpm_err_msg
        case uppercase(cmd)
            '' command confirmed, so return numeric parameter
            value = mid(lpm_results,6,5)
            lpm_err_msg = ""
            return value
        case else
            lpm_err_msg = "unexpected:" & lpm_results
            return QUESTION & QUESTION & lpm_err_msg
        endselect
    case STX
        '' framed telegram output with checksum
        lpm_checksum = lpm_calc_cksum(lpm_results)
        if (lpm_checksum and &h0FF) = 0 then
            lpm_err_msg = ""
            return lpm_results
        else
            lpm_results = QUESTION & mid(lpm_results,2,2233)
            sprintf(msg,"DEBUG: %s, length: %d, checksum bad: 0x%X", _
                    lpm_command, len(lpm_results), lpm_checksum)
            calltable Messages
            lpm_err_msg = "telegram checksum failed"
        endif
    case "U"
        '' LPM help output from "??" command starts with "User commands:"
        lpm_err_msg = ""
        return lpm_results
    case else
        '' simple data output from DD, DX, FM, PT, DA, ZT
        lpm_err_msg = ""
        return lpm_results
    endselect
endfunction

sub log(optional s as string * 80 = "MARK", _
    optional t as string * 40 = "", optional u as string * 40 = "", _
    optional v as string * 40 = "", optional w as string * 40 = "", _
    optional x as string * 40 = "", optional y as string * 40 = "")
    msg = s & " " & t & " " & u & " " & v & " " & w & " " & x & " " & y
    msg = trim(msg)
    calltable(Messages)
endsub

sub get_LPM_diagnostics
    dim i as long
    dim dd(13) as long
    splitStr (dd(),lpm_query(LPM_ID,"DD",-1),SEMICOLON,13,5)
    '' LPM analog diagnostic data from DD[1..13]
    for i = 1 to 13
        LPM_state_vars(i) = dd(i)
        if i = 3 then I_laser__mA /= 100
        if i = 6 then V_sensor__V /= 10
        if i = 10 then V_heating__V /= 10
    next i
endsub

sub get_LPM_flags
    dim i as long
    dim mask as long
    dim flag as long
    dim dx(15) as long
    dim fm(15) as long
    dim got_counts as boolean
    dim msg as string * 60

    '' note that the first (or 0th) entry in DX is ignored!
    splitStr (dx(),mid(lpm_query(LPM_ID,"DX",-1),3,31),SEMICOLON,15,5)
    splitStr (fm(),lpm_query(LPM_ID,"FM",-1),SEMICOLON,15,5)

    '' LPM error flags are in DX[2..7] or DX'[1..6], counts are in FM[1..6]
    mask = 1
    for i = 1 to 6
        msg = ""
        flag = dx(i)
        if flag = 1 and (LPM_error_bits AND mask) = 0 then
            LPM_error_bits = LPM_error_bits OR mask 
            sprintf(msg, "ERROR %d: %s (count:%d)", _
                    i, lpm_error_msgs(i), fm(i))
        endif
        if flag = 0 and (LPM_error_bits AND mask) > 0 then
            LPM_error_bits = LPM_error_bits XOR mask 
            sprintf(msg, "ERROR %d TURNED OFF: %s (count:%d)", _
                    i, lpm_error_msgs(i), fm(i))
        endif
        if msg <> "" then logmsg(msg)
        mask *= 2
    next i

    '' LPM warning flags are in DX[8..16]) or DX'[7..15]), counts are in FM[7..15]
    mask = 1
    for i = 1 to 8
        msg = ""
        flag = dx(6+i)
        if flag = 1 and (LPM_warning_bits AND mask) = 0 then
            LPM_warning_bits = LPM_warning_bits OR mask 
            sprintf(msg, "WARNING %d: %s, (count:%d)", _
                    6+i, lpm_warning_msgs(i), fm(6+i))
        endif
        if flag = 0 and (LPM_warning_bits AND mask) > 0 then
            LPM_warning_bits = LPM_warning_bits XOR mask 
            sprintf(msg, "WARNING %d TURNED OFF: %s (count:%d)", _
                    6+i, lpm_warning_msgs(i), fm(6+i))
        endif
        if msg <> "" then logmsg(msg)
        mask *= 2
    next i
endsub

beginProg

    log()
    
    log("Geonor wire transducer constants follow:")
    Kw(1,1) = GNR1_A    : Kw(1,2) = GNR1_B  : Kw(1,3) = GNR1_F0
    sprintf(msg,"GNR1: A=%.12g, B=%.12g, F0=%.12g, SN=%d",Kw(1,1),Kw(1,2),Kw(1,3),GNR1_SN)
    log(msg)
    sprintf(msg,"GNR2: A=%.12g, B=%.12g, F0=%.12g, SN=%d",Kw(2,1),Kw(2,2),Kw(2,3),GNR2_SN)
    log(msg)
    sprintf(msg,"GNR3: A=%.12g, B=%.12g, F0=%.12g, SN=%d",Kw(3,1),Kw(3,2),Kw(3,3),GNR3_SN)
    log(msg)
    
    gnr_htr_period = HTR_PERIOD_SEC
    
    log("Geonor wire transducer thermistor Steinhart & Hart constants follow:")
    sprintf(msg, "THERMS: A=%.12g B=%.12g C=%.12g", Kt(1), Kt(2), Kt(3))
    log(msg)
    
    '' set logger port to match the LPM through the MD485 rs232-to-rs485 device
    serialOpen (LPM__PORT,9600,0,300,4000)

    '' put instrument in config mode:
    if lpm_query(LPM_ID,"KY",1) <> "1" then log("CONFIG MODE FAILED")

    '' log LPM baud rate and interface mode (should be 9600, half duplex)
    log("LPM baud rate, BR :", lpm_query(LPM_ID,"BR",-1), "(5=9600,6=19200,9=115200)")
    log("LPM comm mode, BD :", lpm_query(LPM_ID,"BD",-1), "(0=full-,1=half-duplex)")

    '' turn off automatic data telegram output
    log("LPM auto telegram output: TM :", lpm_query(LPM_ID,"TM",0))

    '' set the LPM clock from the logger at startup:
    realtime(logger_time) '' 1:year, 2:month, 3:day, 4:hour, 5:minute, 6:second
    lpm_query(LPM_ID,"ZS", logger_time(6))
    lpm_query(LPM_ID,"ZM", logger_time(5))
    lpm_query(LPM_ID,"ZH", logger_time(4))
    lpm_query(LPM_ID,"ZD", logger_time(3))
    lpm_query(LPM_ID,"ZN", logger_time(2))
    lpm_query(LPM_ID,"ZY", logger_time(1) mod 100)
    log("LPM clock set from logger:", lpm_query(LPM_ID,"ZT",-1))
    log("LPM runtime:", lpm_query(LPM_ID,"ZB",-1), "hrs")

    '' put instrument in normal command mode:
    if lpm_query(LPM_ID,"KY",0) <> "0" then log("WARNING: CONFIG MODE FAILED TO TURN OFF")
    
    scan(5,sec,0,0)
        gnr_orifice_T = read_Geonor_orifice_temp()
        gnr_htr_on_ratio = gnr_htr_strategy(AT, RH, gnr_orifice_T)
        gnr_htr_state = htr_relay_control(gnr_htr_on_ratio, gnr_htr_period)
    
    nextScan

    slowSequence
    scan(10,sec,0,0)
        '' measure vibrating wire cycles since last scan, save as frequency
        pulseCount(g1_F,1,GNR1__PP,0,1,1.0,0)
        pulseCount(g2_F,1,GNR2__PP,0,1,1.0,0)
        pulseCount(g3_F,1,GNR3__PP,0,1,1.0,0)
        calltable(Geonor_wires_freq)

        '' update running averages for processing and logging in 60-second scan
        avgRun(gnr_Favg, 3, gnr_F(), 6)
    
        '' read Geonor wire transducer thermistors:
        BrHalf (X(),3,mV2500,GNR1_THERM__SE,GNR_THERMS__EX,3,2500,0,0,250,1.0,0)
        For i=1 To 3
            gnr_R(i) = GNR_THERM_REF_R*X(i)/(1-X(i))
        Next i
        calltable(Geonor_therms_R)

        '' update running averages for processing and logging in 60-second scan
        avgRun(gnr_Ravg, 3, gnr_R(), 6)
    
    nextScan

    slowSequence
    scan(60,sec,0,0)
        battery(battery)
    
        panelTemp(panelTemp,250)
    
        for i=1 to 3
            '' calculate fluid level in bucket from pulseCount() frequency
            gnr_level(i) = calc_wire_depth(gnr_Favg(i), Kw(i,1), Kw(i,2), Kw(i,3))
        next i

        callTable(Geonor_derived_data)
    
        for i=1 to 3
            '' calculate wire thermistor temps from averaged resistance:
            gnr_T(i) = calc_therm_T(gnr_Ravg(i), Kt(1), Kt(2), Kt(3))
        next i

        callTable(Geonor_derived_data)
    
        if timeIntoInterval(0,1,day) then
            '' emit message with several parameters, then zero precip total:
            log("LPM:" & lpm_query(LPM_ID,"ZT",-1), _
                lpm_query(LPM_ID,"ZB",-1) & " hrs", _
                "errors:" + LPM_error_bits, _
                "warnings:" + LPM_warning_bits)
             '' LPM_precip_qty & " mm in " & lpm_query(LPM_ID,"PT",-1) & " hrs")
         '' lpm_query(LPM_ID,"RA")
        endif
    
        '' every minute, read data telegram from the LPM
        '' retry query if LPM returns "!TR00001", which means: telegram not available
        '' NOTE: STX has been replaced by "?" if the checksum failed!
        telegram_query_tries = 0
        do
            delay(0,1,sec)
            telegram = lpm_query(LPM_ID, "TR", LPM_TELEGRAM)
            telegram_query_tries += 1
        loop until telegram <> 1 or telegram_query_tries > 3
        callTable LPM
        SplitStr (LPM(),telegram,SEMICOLON,524,5)
        LPM(1) = right(LPM(1),2)    ' remove <STX> from LPM ID code NN
    
        get_LPM_diagnostics()
        callTable LPM_state
    
        get_LPM_flags()
        callTable LPM_state
    
    nextScan

endProg
