'' LPM.cr1 for UAF/ARM by Ken.Irving@alaska.edu 20180521.63

ConstTable
    const LPM_NAME  = "Laser Precipitation Monitor"
    const LPM_MODEL = "5.4110.11.100"
    const LPM__COMMPORT = Com1      ' C1=Tx (db9F-pin3), C2=Rx (db9F-pin2)
endConstTable

const ETX = chr(3)
const CR = chr(13)
const SEMICOLON = chr(59)

public battery      : units battery = volts 
public panelTemp    : units panelTemp = deg C
public progSig as Long

dim telegram5 as string * 2233
public tm5_checksum as long 
dim LPM(524) as string

'' LPM error and warning flags:
public LPM_errors as long
public LPM_warnings as long
dim LPM_error(6) as string * 40
dim LPM_warning(9) as string * 40

'' LPM diagnostic analog data from DD[1..13] or LPM[37..49]
public T_interior   : units T_interior   = degC ' 1: "interior temp [degC]"
public T_laserdrvr  : units T_laserdrvr  = degC ' 2: "laser driver temp 0-80 degC"
public I_laser      : units I_laser      = mA   ' 3: "laser current mean [1/100 mA]"
public V_control    : units V_control    = mV   ' 4: "control voltage [mV] ref value"
public V_optical    : units V_optical    = mV   ' 5: "optical control [mV]/control var"
public V_sensor     : units V_sensor     = V    ' 6: "voltage supply [1/10V]"
public I_laser_pane : units I_laser_pane = mA   ' 7: "laser pane heating current [mA]"
public I_recvr_pane : units I_recvr_pane = mA   ' 8: "receiver pane heating current [mA]"
public T_ambient    : units T_ambient    = degC ' 9: "ambient temp [degC]"
public V_heating    : units V_heating    = V    ' 10: "voltage heating supply voltage[1/10V]"
public I_housing    : units I_housing    = mA   ' 11: "heating housing current [mA]"
public I_heads      : units I_heads      = mA   ' 12: "heating heads current [mA]"
public I_carriers   : units I_carriers   = mA   ' 13: "heating carriers current [mA]"

'' logmsg() puts up to 7 arguments into msg string, stores in table Messages:
dim logger_time(9)
dim msg as string * 80
dataTable("Messages",1,100)
    sample(1,progSig,uint2)
    sample(1,msg,string)
endTable
sub logmsg(optional s as string * 80 = "MARK", _
    optional t as string * 40 = "", optional u as string * 40 = "", _
    optional v as string * 40 = "", optional w as string * 40 = "", _
    optional x as string * 40 = "", optional y as string * 40 = "")
    msg = s & " " & t & " " & u & " " & v & " " & w & " " & x & " " & y
    msg = trim(msg)
    calltable(Messages)
endsub

DataTable(LPM_state,1,-1)
  DataInterval(0,60,Sec,0)
  sample(1,progSig,uint2)
  sample(1,T_interior,fp2)
  sample(1,T_laserdrvr,fp2)
  sample(1,I_laser,fp2)
  sample(1,V_control,fp2)
  sample(1,V_optical,fp2)
  sample(1,V_sensor,fp2)
  sample(1,I_laser_pane,fp2)
  sample(1,I_recvr_pane,fp2)
  sample(1,T_ambient,fp2)
  sample(1,V_heating,fp2)
  sample(1,I_housing,fp2)
  sample(1,I_heads,fp2)
  sample(1,I_carriers,fp2)
  sample(1,LPM_errors,uint2)
  sample(1,LPM_warnings,uint2)
EndTable

sub get_LPM_state
    dim i as long
    dim mask as long
    dim flag as long

    '' LPM analog diagnostic data from DD[1..13] or LPM[37..49]
    T_interior = LPM(36+1)
    T_laserdrvr = LPM(36+2)     ' "temp of laser driver 0-80 degC"
    I_laser     = LPM(36+3)     ' "mean value laser current [1/100 mA]"
    I_laser /= 100              ' (scaling has to be done after assignment)
    V_control   = LPM(36+4)     ' "control voltage [mV] ref value: 4010+/-5"
    V_optical   = LPM(36+5)     ' "optical control [mV] / control variable"
    V_sensor    = LPM(36+6)     ' "voltage sensor supply [1/10V]"
    V_sensor /= 10
    I_laser_pane= LPM(36+7)     ' "current page heating laser head [mA]"
    I_recvr_pane= LPM(36+8)     ' "current page heating receiver head [mA]"
    T_ambient   = LPM(36+9)     ' "ambient temp [degC]"
    V_heating   = LPM(36+10)    ' "voltage heating supply [1/10V]"
    V_heating /= 10
    I_housing   = LPM(36+11)    ' "current heating housing [mA]"
    I_heads     = LPM(36+12)    ' "current heating heads [mA]"
    I_carriers  = LPM(36+13)    ' "current heating carriers [mA]"

    '' LPM error flags are from LPM[21..27] (also see DX[1..6])
    mask = 1
    for i = 1 to 6
        flag = LPM(20+i)
        if flag = 1 and (LPM_errors AND mask) = 0 then
            logmsg("ERROR:", LPM_error(i))
            LPM_errors = LPM_errors OR mask 
        endif
        if flag = 0 and (LPM_errors AND mask) > 0 then
            logmsg("error off:", LPM_error(i))
            LPM_errors = LPM_errors XOR mask 
        endif
        mask *= 2
    next i

    '' LPM warning flags are from LPM[28..36] (also see DX[7..15])
    mask = 1
    for i = 1 to 8
        flag = LPM(27+i)
        if flag = 1 and (LPM_warnings AND mask) = 0 then
            logmsg("WARNING:", LPM_warning(i) )
            LPM_warnings = LPM_warnings OR mask 
        endif
        if flag = 0 and (LPM_warnings AND mask) > 0 then
            logmsg("warning off:", LPM_warning(i))
            LPM_warnings = LPM_warnings XOR mask 
        endif
        mask *= 2
    next i

endsub

DataTable(LPM,tm5_checksum=0,-1)
  dataInterval(0,60,Sec,10)
  sample(1,telegram5,String)
  sample(1,progSig,uint2)
EndTable
    
function lpm_checksum(s as string * 2233) as long
    dim last as long, i as long, a as long, sum as long
    last = len(s)
    if ascii(s(1,1,1)) <> 2 then return False
    if ascii(s(1,1,last)) <> 3 then return False
    i = 0
    sum = 0
    do
        i += 1
        a = ascii(s(1,1,i))
        if i = last-5 OR i = last-4 then
            '' convert checksum hex nibble "1" to 1, "A" to 10, etc.
            if a>=48 AND a<=57 then a-=48 else if a>=65 AND a<=70 then a-=55
            if i = last-5 then a *= 16
        endif
        sum += a
    loop until i = last
    '' adding the checksum to the sum of bytes should result in 0x00 in last byte
    return sum << 24
endFunction

sub init_LPM_messages
    '' LPM error flags from LPM[21..27] or DX[1..6]
    LPM_error(1) = "static signal out of range"
    LPM_error(2) = "laser temp (analog) too high"
    LPM_error(3) = "laser temp (digital) too high"
    LPM_error(4) = "laser current (analog) too high"
    LPM_error(5) = "laser current (digital) too high"
    LPM_error(6) = "sensor supply out of range"

    '' LPM warning flags from LPM[28..36] or DX[7..15]
    LPM_warning(1) = "current: pane heating laser head"
    LPM_warning(2) = "current: pane heating receiver head"
    LPM_warning(3) = "temperature sensor"
    LPM_warning(4) = "heating supply out of allowed range"
    LPM_warning(5) = "current: heating housing"
    LPM_warning(6) = "current: heating heads"
    LPM_warning(7) = "current: heating carriers"
    LPM_warning(8) = "control output laser power high"
    LPM_warning(9) = "not used"
endSub

beginProg
    progSig = status.ProgSignature

    serialOpen (LPM__COMMPORT,9600,0,300,4000)

    init_LPM_messages

    Scan (60,sec,0,0)
        panelTemp (panelTemp,_60Hz)
        battery (battery)

        '' every minute, read data telegram 5 from the LPM:
        serialIn(telegram5,LPM__COMMPORT,1500,ETX,2233)
        tm5_checksum = lpm_checksum(telegram5)
        callTable LPM
  
        SplitStr (LPM(),telegram5,SEMICOLON,524,5)
        LPM(1) = right(LPM(1),2)    ' remove <STX> from LPM ID code NN
          
        get_LPM_state()
        callTable LPM_state

        '' run a checksum test with altered input string:
        if lpm_checksum(replace(telegram5," ", "_")) = 0 then
            logmsg("lpm_checksum() failed!!")
        endif

    NextScan
EndProg

