' cr1000 program for Geonor T200B-3 with heater
' ki 20180426.59

ConstTable

    '' Geonor nameplate data:
    const GEONOR_MANUF = "Geonor"
    const GEONOR_NAME  = "Precipitation Gauge"
    const GEONOR_MODEL = "T-200B3 - 600mm"
    const GEONOR_WEB   = "www.geonor.com"
    const GEONOR_SN    = "343 16"
    
    ' Geonor transducer serial numbers, pulse and analog input channels:
    const GNR1_SN = 62417 : const GNR1__PP = 1  : const GNR1__SE = 1
    const GNR2_SN = 62517 : const GNR2__PP = 2  : const GNR2__SE = 2
    const GNR3_SN = 62617 : const GNR3__PP = 18 : const GNR3__SE = 3
    
    ' Geonor transducer calibration constants:
    const GNR1_F0 = 1050.4 : const GNR1_A = 0.0164316 : const GNR1_B = 0.00000921903
    const GNR2_F0 = 1055.3 : const GNR2_A = 0.0165625 : const GNR2_B = 0.00000917252
    const GNR3_F0 = 1066.0 : const GNR3_A = 0.0165758 : const GNR3_B = 0.00000916086
    
    '' Geonor orifice RTD, Minco S665PFY40B, 1000 Ohms at 0C
    '' derived an empirical (linear) relation from dataset from -40 to 0C 
    '' and confirmed with several resistance vs temperature measurements
    '' (note that the sensor is an RTD, not a thermistor)
    const GNR_RTD_M = 0.25 ' degrees/Ohm
    const GNR_RTD_B = -250 ' degrees C
    const GNR_REF_R = 1000 ' Ohms
    const GNR_RTD__SE = 7  : const GNR_RTD__EX = 2

    '' thermistors taped to each (of 3) Geonor vibrating wire transducer:
    const GNR_THERM__SE = 4
    const GNR_THERM__EX = 1
    const GNR_THERM_REF_R = 5000

    '' Steinhart & Hart coefficients for YSI 44004 thermistors, 2252 Ohms @ 25C:
    const THERM_A = 0.0014654354
    const THERM_B = 0.0002386780
    const THERM_C = 0.0000001000

    const GNR_HTR_PERIOD = 10  ' number of scans for heater control 100% duty cycle
EndConstTable

public panelTemp  : units panelTemp = deg C
public battery    : units battery = volts 
public progSig as Long
  
'' measured Geonor variables; f:frequency from pulseCount():
public gnr_F(3)     : units gnr_F = Hz     : alias gnr_F = gnr1_F, gnr2_F, gnr3_F
public gnr_Favg(3)

'' measured Geonor variables; f2:frequency from periodAverage():
public gnr_F2(3)    : units gnr_F2 = Hz    : alias gnr_F2 = gnr1_F2, gnr2_F2, gnr3_F2
public gnr_F2avg(3)

'' a thermistor is taped to each vibrating wire transducer:
public gnr_R(3)     : units gnr_R = Ohms  : alias gnr_R = gnr1_R, gnr2_R, gnr3_R
public gnr_Ravg(3)
public gnr_T(3)     : units gnr_T = Deg C  : alias gnr_T = gnr1_T, gnr2_T, gnr3_T

'' derived Geonor variables
public gnr_level(3) : units gnr_level = mm : alias gnr_level = gnr1_lvl,gnr2_lvl,gnr3_lvl 
public gnr_level2(3) : units gnr_level2 = mm
alias gnr_level2 = gnr1_lvl2,gnr2_lvl2,gnr3_lvl2 
public gnr_precip   : units gnr_precip = mm
public gnr_last_level 
 

'' Geonor orifice RTD and heater
public gnr_orifice_temp     : units gnr_orifice_temp = deg C
public gnr_htr_state as boolean
public gnr_htr_maxsteps ' number of scans comprising heater control period
public gnr_htr_step     ' current heater control step 
public gnr_htr_on_ratio ' heater control setpoint, ratio of ON/OFF times

dim msg as string * 80
dim X(3)
dim i

'' KW contains calibration sconstants for vibrating wires, KT for thermistors
dim KW(3,3) as float
dim KT(3) as float

dataTable("Messages",1,100)
    sample(1,progSig,uint2)
    sample(1,msg,string)
endTable

sub logmsg(optional s as string * 40 = "MARK", _
    optional t as string * 40 = "", optional u as string * 40 = "", _
    optional v as string * 40 = "", optional w as string * 40 = "", _
    optional x as string * 40 = "", optional y as string * 40 = "")
    msg = s & " " & t & " " & u & " " & v & " " & w & " " & x & " " & y
    msg = trim(msg)
    calltable(Messages)
endsub

DataTable(Geonor_raw,1,-1)
    DataInterval(0,10,sec,0)
    Sample(1,progSig,uint2)
    sample(3,gnr_F,ieee4)
    sample (3,gnr_R,ieee4)
EndTable

DataTable(Geonor_data,1,-1)
    DataInterval(0,60,sec,10)
    Sample(1,progSig,uint2)
    sample (3,gnr_level,FP2)
    sample (3,gnr_level2,FP2)
    Sample(1,gnr_orifice_temp,FP2)
    Average(1,gnr_htr_state,fp2,false)
EndTable

function read_Geonor_RTD()
    '' TODO: see if the crBasic prt() instruction can be used in lieu of all this...
    dim x, t, t2
    BrHalf (x,1,mV250,GNR_RTD__SE,GNR_RTD__EX,1,250,0,0,250,1.0,0)
    t = GNR_REF_R*x/(1-x) * GNR_RTD_M + GNR_RTD_B
    return t
    '' following is the alternative prt() to evaluate:
    prt(t2,1,x,1,0)
endFunction

function calc_therm_T(R)
    dim T
    T = (1/(THERM_A + THERM_B*ln(R) + THERM_C*ln(R)^3)) - 273.15
    return T
endFunction

sub heater_control
    ' increment state step counter modulus the control period:
    gnr_htr_step = (gnr_htr_step + 1) mod gnr_htr_maxsteps
    gnr_htr_state = gnr_htr_step < gnr_htr_on_ratio * gnr_htr_maxsteps
    portSet(4,gnr_htr_state)
endSub

sub log_gnr_metadata
    logmsg("Geonor vibrating wire transducer constants follow:")
    sprintf(msg, "GNR1: SN=%d F0=%.*g A=%.*g B=%.*g",1,GNR1_SN,GNR1_F0,6,GNR1_A,6,GNR1_B)
    calltable(Messages)
    sprintf(msg, "GNR2: SN=%d F0=%.*g A=%.*g B=%.*g",2,GNR2_SN,GNR2_F0,6,GNR2_A,6,GNR2_B)
    calltable(Messages)
    sprintf(msg, "GNR3: SN=%d F0=%.*g A=%.*g B=%.*g",3,GNR3_SN,GNR3_F0,6,GNR3_A,6,GNR3_B)
    calltable(Messages)
    logmsg("Geonor vibrating wire xdcr Steinhart & Hart constants follow:"
    sprintf(msg, "GNR1..3 xdcrs: A=%.*g B=%.*g C=%.*g", 8,THERM_A,8,THERM_B,4,THERM_C)
    calltable(Messages)
endSub

sub init_gnr_calib
    KW(1,1) = {GNR1_A, GNR1_B, GNR1_F0}
    KW(2,1) = {GNR2_A, GNR2_B, GNR2_F0}
    KW(3,1) = {GNR3_A, GNR3_B, GNR3_F0}
    KT() = {THERM_A, THERM_B, THERM_C} 
endSub

function calc_wire_depth(freq, A, B, F0)
    dim level
    level = 10*(A*(freq-F0) + B*(freq-F0)^2)
    return level
endfunction

BeginProg
    progSig = status.ProgSignature
    gnr_htr_maxsteps = GNR_HTR_PERIOD
    log_gnr_metadata()
    init_gnr_calib()

    Scan (10,sec,0,0)
        '' measure vibrating wire cycles since last scan, save as frequency
        pulseCount(gnr1_F,1,GNR1__PP,0,1,1.0,0)
        pulseCount(gnr2_F,1,GNR2__PP,0,1,1.0,0)
        pulseCount(gnr3_F,1,GNR3__PP,0,1,1.0,0)
        
        '' read Geonor wire transducer thermistors:
        BrHalf (X(),3,mV2500,GNR_THERM__SE,GNR_THERM__EX,3,2500,0,0,250,1.0,0)
        For i=1 To 3
            gnr_R(i) = GNR_THERM_REF_R*X(i)/(1-X(i))
        Next i

        '' log the raw wire frequency and thermistor resistance measurements:
        callTable Geonor_raw

        '' update running averages for processing and logging in 60-second scan
        avgRun(gnr_Favg, 3, gnr_F(), 6)
        avgRun(gnr_Ravg, 3, gnr_R(), 6)
    NextScan

    SlowSequence
    Scan(2,sec,0,0)
        '' experimental and redundant: measure frequency using period averaging:
        periodAvg(gnr_F2,3,mV250,GNR1__SE,0,1,100,150,1,0)
        avgRun(gnr_F2avg, 3, gnr_F2(), 30)

    SlowSequence
    Scan(60,sec,0,0)
        panelTemp(panelTemp,_60Hz)
        battery(battery)

        '' calculate fluid level in bucket from pulseCount() frequency
        gnr1_lvl = calc_wire_depth(gnr_Favg(1), GNR1_A, GNR1_B, GNR1_F0)
        gnr2_lvl = calc_wire_depth(gnr_Favg(2), GNR2_A, GNR2_B, GNR2_F0)
        gnr3_lvl = calc_wire_depth(gnr_Favg(3), GNR3_A, GNR3_B, GNR3_F0)

        '' calculate fluid level in bucket from periodAvg() frequency (experimental)
        gnr1_lvl2 = calc_wire_depth(gnr_F2avg(1), GNR1_A, GNR1_B, GNR1_F0)
        gnr2_lvl2 = calc_wire_depth(gnr_F2avg(2), GNR2_A, GNR2_B, GNR2_F0)
        gnr3_lvl2 = calc_wire_depth(gnr_F2avg(3), GNR3_A, GNR3_B, GNR3_F0)

        '' calculate wire thermistor temps from averaged resistance:
        gnr1_T = calc_therm_T(gnr_Ravg(1))
        gnr2_T = calc_therm_T(gnr_Ravg(2))
        gnr3_T = calc_therm_T(gnr_Ravg(3))

        callTable Geonor_data
    NextScan
EndProg

'' CRBasic instruction example calls and prototypes:
''
''  pulseCount(gnr2_F,1,GNR2__PP,0,1,1.0,0)
''  pulseCount(
''      Dest,
''      Reps,
''      PChan:      n+10 to use control port n
''      Config:     high frequency (0), AC (1), switch closure (2)
''      Option:     counts (0), frequency (1), mSec for running average (>1)
''      Mult,
''      Ofs)
''  )
''
''  periodAvg(gnr_F2,3,mV250,GNR1__SE,0,1,500,1000,1,0)
''  periodAvg(
''      Dest,
''      Reps,
''      Range,
''      SEChan,
''      Threshold:  mV; use if signal is not centered on 0 mV
''      Option:     return period (0) or frequency (1)
''      Cycles:     number of cycles to average
''      Timeout:    max mSec to wait for number of cycles to be measured
''      Mult,
''      Ofs
''  )
''
''  avgRun(gnr_Favg, 3, gnr_F(), 6)
''  avgRun(
''      Dest, 
''      Reps:       number of array values to (separately) average
''      Source, 
''      Number:     number of values to include in running average
''  )
''
''  BrHalf(X(),3,mV2500,GNR_THERM__SE,GNR_THERM__EX,3,2500,0,0,250,1.0,0)
''  BrHalf(
''      Dest
''      Reps
''      Range
''      SEChan
''      ExChan
''      MeasPEx
''      ExmV
''      RevEx
''      SettlingTime
''      Integ
''      Mult
''      Offset
''  )
