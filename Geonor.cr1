' cr1000 program for Geonor T200B-3 with heater
' ki 20180426.59

ConstTable

    '' Geonor nameplate data:
    const GEONOR_MANUF = "Geonor"
    const GEONOR_NAME  = "Precipitation Gauge"
    const GEONOR_MODEL = "T-200B3 - 600mm"
    const GEONOR_WEB   = "www.geonor.com"
    const GEONOR_SN    = "343 16"
    
    ' Geonor transducer serial numbers, pulse and analog input channels:
    const GNR1_SN = 62417 : const GNR1__PP = 1  : const GNR1__SE = 1
    const GNR2_SN = 62517 : const GNR2__PP = 2  : const GNR2__SE = 2
    const GNR3_SN = 62617 : const GNR3__PP = 18 : const GNR3__SE = 3
    
    ' Geonor transducer calibration constants:
    const GNR1_F0 = 1050.4 : const GNR1_A = 0.0164316 : const GNR1_B = 0.00000921903
    const GNR2_F0 = 1055.3 : const GNR2_A = 0.0165625 : const GNR2_B = 0.00000917252
    const GNR3_F0 = 1066.0 : const GNR3_A = 0.0165758 : const GNR3_B = 0.00000916086
    
    '' Geonor orifice RTD, Minco S665PFY40B, 1000 Ohms at 0C
    '' derived an empirical (linear) relation from dataset from -40 to 0C 
    '' and confirmed with several resistance vs temperature measurements
    '' (note that the sensor is an RTD, not a thermistor)
    const GNR_RTD_M = 0.25 ' degrees/Ohm
    const GNR_RTD_B = -250 ' degrees C
    const GNR_REF_R = 1000 ' Ohms
    const GNR_RTD__SE = 7  : const GNR_RTD__EX = 2

    '' thermistors taped to each (of 3) Geonor vibrating wire transducer:
    const GNR_THERM__SE = 4
    const GNR_THERM__EX = 1
    const GNR_THERM_REF_R = 5000

    '' Steinhart & Hart coefficients for YSI 44004 thermistors, 2252 Ohms @ 25C:
    const THERM_A = 0.0014654354
    const THERM_B = 0.0002386780
    const THERM_C = 0.0000001000

    const GNR_HTR_PERIOD = 10  ' number of scans for heater control 100% duty cycle
EndConstTable

public panelTemp  : units panelTemp = deg C
public battery    : units battery = volts 
public progSig as Long
  
'' measured Geonor variables; f:frequency from pulseCount():
public gnr_f(3)     : units gnr_f = Hz     : alias gnr_f = gnr1_f, gnr2_f, gnr3_f
public gnr_favg(3)

'' measured Geonor variables; f2:frequency from periodAverage():
public gnr_f2(3)    : units gnr_f2 = Hz    : alias gnr_f2 = gnr1_f2, gnr2_f2, gnr3_f2
public gnr_f2avg(3)

'' a thermistor is taped to each vibrating wire transducer:
public gnr_t(3)     : units gnr_t = Deg C  : alias gnr_t = gnr1_temp, gnr2_temp, gnr3_temp

'' derived Geonor variables
public gnr_level(3) : units gnr_level = mm : alias gnr_level = gnr1_lvl,gnr2_lvl,gnr3_lvl 
public gnr_level2(3) : units gnr_level2 = mm
alias gnr_level2 = gnr1_lvl2,gnr2_lvl2,gnr3_lvl2 
public gnr_precip   : units gnr_precip = mm
public gnr_last_level 
 

'' Geonor orifice RTD and heater
public gnr_orifice_temp     : units gnr_orifice_temp = deg C
public gnr_htr_state as boolean
public gnr_htr_maxsteps ' number of scans comprising heater control period
public gnr_htr_step     ' current heater control step 
public gnr_htr_on_ratio ' heater control setpoint, ratio of ON/OFF times


DataTable(Geonor_raw,1,-1)
    DataInterval(0,60,sec,10)
    Sample(1,progSig,uint2)
    Average (3,gnr_f,FP2,False)
    StdDev (3,gnr_f,FP2,False)
    Average (3,gnr_f2,FP2,False)
    StdDev (3,gnr_f2,FP2,False)
    Sample (3,gnr_t,FP2)
EndTable

DataTable(Geonor_data,1,-1)
    DataInterval(0,60,sec,10)
    Sample(1,progSig,uint2)
    sample (3,gnr_level,FP2)
    sample (3,gnr_level2,FP2)
    Sample(1,gnr_orifice_temp,FP2)
    Average(1,gnr_htr_state,fp2,false)
EndTable

function read_Geonor_RTD()
    '' TODO: see if the crBasic prt() instruction can be used in lieu of all this...
    dim x, r, t, t2
    BrHalf (x,1,mV250,GNR_RTD__SE,GNR_RTD__EX,1,250,0,0,250,1.0,0)
    r = GNR_REF_R*x/(1-x)
    t = r * GNR_RTD_M + GNR_RTD_B
    prt(t2,1,x,1,0)
    return t
endFunction ' read_Geonor_RTD

Sub read_xdcr_temps
    dim lnR
    dim X(3)
    dim R(3)
    dim i as long
    BrHalf (X(),3,mV2500,GNR_THERM__SE,GNR_THERM__EX,3,2500,0,0,250,1.0,0)
    For i=1 To 3
        R(i) = GNR_THERM_REF_R*X(i)/(1-X(i))
        lnR = ln(R(i))
        gnr_t(i) = (1/(THERM_A + THERM_B*lnR + THERM_C*lnR^3)) - 273.15
    Next i
EndSub ' read_xdcr_temps

sub heater_control
    ' increment state step counter modulus the control period:
    gnr_htr_step = (gnr_htr_step + 1) mod gnr_htr_maxsteps
    gnr_htr_state = gnr_htr_step < gnr_htr_on_ratio * gnr_htr_maxsteps
    portSet(4,gnr_htr_state)
endSub ' heater_control

BeginProg
    progSig = status.ProgSignature
    gnr_htr_maxsteps = GNR_HTR_PERIOD
    Scan (10,sec,0,0)
            
        '' pulseCount(Dest,Reps,PChan,Config,Option,Mult,Ofs)
        ''     PChan: n+10 to use control port n
        ''     Config: high frequency (0), AC (1), switch closure (2)
        ''     Option: counts (0), frequency (1), mSec for running average (>1)
        pulseCount(gnr1_f,1,GNR1__PP,0,1,1.0,0)
        pulseCount(gnr2_f,1,GNR2__PP,0,1,1.0,0)
        pulseCount(gnr3_f,1,GNR3__PP,0,1,1.0,0)
        
        '' for redundancy, measure f2 frequency using period averaging:
        '' periodAvg(Dest,Reps,Range,SEChan,Threshold,Option,Cycles,Timeout,Mult,Ofs)
        ''     Threshold: mV; use if signal is not centered on 0 mV
        ''     Option: return period (0) or frequency (1)
        ''     Cycles: number of cycles to average
        ''     Timeout: max mSec to wait for number of cycles to be measured
        periodAvg(gnr_f2,3,mV250,GNR1__SE,0,1,500,1000,1,0)

        '' update running averages for the f and f2 values:
        '' avgRun(Dest, Reps, Source, Number)
        ''     Reps: number of array values to (separately) average
        ''     Number: number of values to include in running average
        avgRun(gnr_favg, 3, gnr_f(), 6)
        avgRun(gnr_f2avg, 3, gnr_f2(), 6)


        '' read Geonor transducer thermistors once just before logging raw data:
        if iftime(0, 60, sec) then
            read_xdcr_temps
        endif

        callTable Geonor_raw
    NextScan

    SlowSequence
    Scan(60,sec,0,0)
        panelTemp(panelTemp,_60Hz)
        battery(battery)

        '' calculate fluid level in bucket from frequency using calibration constants:
        gnr1_lvl = 10*(GNR1_A*(gnr_favg(1)-GNR1_F0) + GNR1_B*(gnr_favg(1)-GNR1_F0)^2)
        gnr2_lvl = 10*(GNR2_A*(gnr_favg(2)-GNR2_F0) + GNR2_B*(gnr_favg(2)-GNR2_F0)^2)
        gnr3_lvl = 10*(GNR3_A*(gnr_favg(3)-GNR3_F0) + GNR3_B*(gnr_favg(3)-GNR3_F0)^2)
        
        '' for redundancy, measure f2 frequency using period averaging:
        gnr1_lvl2 = 10*(GNR1_A*(gnr_f2avg(1)-GNR1_F0) + GNR1_B*(gnr_f2avg(1)-GNR1_F0)^2)
        gnr2_lvl2 = 10*(GNR2_A*(gnr_f2avg(2)-GNR2_F0) + GNR2_B*(gnr_f2avg(2)-GNR2_F0)^2)
        gnr3_lvl2 = 10*(GNR3_A*(gnr_f2avg(3)-GNR3_F0) + GNR3_B*(gnr_f2avg(3)-GNR3_F0)^2)
        
        callTable Geonor_data
    NextScan
EndProg

