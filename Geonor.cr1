' cr1000 program for Geonor T200B-3 with heater
' ki 20180511.58

ConstTable

    '' Geonor nameplate data:
    const GEONOR_NAME  = "Geonor Precipitation Gauge"
    const GEONOR_MODEL = "T-200B3 - 600mm"
    
    ' Geonor transducer serial numbers, pulse input channels:
    const GNR1_SN = 62417 : const GNR1__PP = 1
    const GNR2_SN = 62517 : const GNR2__PP = 2
    const GNR3_SN = 62617 : const GNR3__PP = 18
    
    ' Geonor transducer calibration constants:
    const GNR1_F0 = 1050.4 : const GNR1_A = 0.0164316 : const GNR1_B = 0.00000921903
    const GNR2_F0 = 1055.3 : const GNR2_A = 0.0165625 : const GNR2_B = 0.00000917252
    const GNR3_F0 = 1066.0 : const GNR3_A = 0.0165758 : const GNR3_B = 0.00000916086
    
    '' Geonor orifice RTD, Minco S665PFY40B, 1000 Ohms at 0C
    const GNR_RTD__SE = 7 
    const GNR_RTD__EX = 2
    const GNR_RTD_R0 = 1000 ' Ohms

    const HTR_RELAY__P = 1      ' control port wired to solid state relay
    const HTR_SCAN_SEC = 2      ' control scan time, also minimum heater ON time
    const HTR_PERIOD_SEC = 30   ' duty cycle period for heater control

    '' thermistors taped to each (of 3) Geonor vibrating wire transducer:
    const GNR_THERM__SE = 4
    const GNR_THERM__EX = 1
    const GNR_THERM_REF_R = 5000

    '' Steinhart & Hart coefficients for YSI 44004 thermistors, 2252 Ohms @ 25C:
    const THERM_A = 0.0014654354
    const THERM_B = 0.0002386780
    const THERM_C = 0.0000001000

EndConstTable

public panelTemp  : units panelTemp = deg C
public battery    : units battery = volts 
public progSig as Long
  
'' measured Geonor variables; f:frequency from pulseCount():
public gnr_F(3)     : units gnr_F = Hz     : alias gnr_F = g1_F, g2_F, g3_F
public gnr_Favg(3)

'' a thermistor is taped to each vibrating wire transducer:
public gnr_R(3)     : units gnr_R = Ohms  : alias gnr_R = g1_R, g2_R, g3_R
public gnr_Ravg(3)
public gnr_T(3)     : units gnr_T = Deg C  : alias gnr_T = g1_T, g2_T, g3_T

'' derived Geonor variables
public gnr_level(3) : units gnr_level = mm : alias gnr_level = g1_lvl,g2_lvl,g3_lvl 
public gnr_precip   : units gnr_precip = mm
public gnr_last_level 

'' Geonor orifice RTD and heater
public gnr_orifice_T        : units gnr_orifice_T = deg C
public gnr_htr_period       : units gnr_htr_period = sec    '' 100% duty cycle time
public gnr_htr_on_ratio ' heater control setpoint, ratio of ON/OFF times
public gnr_htr_state as boolean

'' ambient air temperature and humidity
'' TODO: define these using HMP45C or equivalent sensor!!
public AT   : units AT = degC
public RH   : units RH = %

dim msg as string * 80
dim X(3)
dim i

'' Kw contains calibration sconstants for vibrating wires, Kt for thermistors
dim Kw(3,3) as float
dim Kt(3) as float

dataTable("Messages",1,100)
    sample(1,progSig,uint2)
    sample(1,msg,string)
endTable

sub logmsg(optional s as string * 80 = "MARK", _
    optional t as string * 40 = "", optional u as string * 40 = "", _
    optional v as string * 40 = "", optional w as string * 40 = "", _
    optional x as string * 40 = "", optional y as string * 40 = "")
    msg = s & " " & t & " " & u & " " & v & " " & w & " " & x & " " & y
    msg = trim(msg)
    calltable(Messages)
endsub

DataTable(Geonor_raw,1,-1)
    DataInterval(0,10,sec,0)
    Sample(1,progSig,uint2)
    sample(3,gnr_F,ieee4)
    sample (3,gnr_R,ieee4)
EndTable

DataTable(Geonor_data,1,-1)
    DataInterval(0,60,sec,10)
    Sample(1,progSig,uint2)
    sample (3,gnr_level,FP2)
    average(1,gnr_orifice_T,fp2,false)
    average(1,gnr_htr_state,fp2,false)
EndTable

function read_Geonor_RTD()
    dim x
    dim T
    BrHalf (x,1,mV250,GNR_RTD__SE,GNR_RTD__EX,1,250,0,0,250,1.0,0)
    prt(T,1,x/(1-x),1,0)
    return T
endFunction

function calc_therm_T(R, A, B, C)
    dim T
    T = (1/(A + B*ln(R) + C*ln(R)^3)) - 273.15
    return T
endFunction

sub init_gnr_calib
    logmsg("Geonor vibrating wire transducer constants follow:")

    Kw(1,1) = GNR1_A    : Kw(1,2) = GNR1_B  : Kw(1,3) = GNR1_F0
    sprintf(msg, "GNR1: SN=%d F0=%.*g A=%.*g B=%.*g",1,GNR1_SN,GNR1_F0,6,GNR1_A,6,GNR1_B)
    calltable(Messages)

    Kw(2,1) = GNR2_A    : Kw(2,2) = GNR2_B  : Kw(2,3) = GNR2_F0
    sprintf(msg, "GNR2: SN=%d F0=%.*g A=%.*g B=%.*g",2,GNR2_SN,GNR2_F0,6,GNR2_A,6,GNR2_B)
    calltable(Messages)

    Kw(3,1) = GNR3_A    : Kw(3,2) = GNR3_B  : Kw(3,3) = GNR3_F0
    sprintf(msg, "GNR3: SN=%d F0=%.*g A=%.*g B=%.*g",3,GNR3_SN,GNR3_F0,6,GNR3_A,6,GNR3_B)
    calltable(Messages)

    logmsg("Geonor vibrating wire xdcr thermistors Steinhart & Hart constants follow:"

    Kt(1) = THERM_A     : Kt(2) = THERM_B   : Kt(3) = THERM_C 
    sprintf(msg, "GNR1..3 xdcrs: A=%.*g B=%.*g C=%.*g", 8,THERM_A,8,THERM_B,4,THERM_C)
    calltable(Messages)
endSub

function calc_wire_depth(freq, A, B, F0)
    dim level
    level = 10*(A*(freq-F0) + B*(freq-F0)^2)
    return level
endfunction

function htr_relay_control(ratio as float, period as long) as boolean
    dim elapsed as float
    dim ontime as float
    dim state as boolean
    elapsed = timer(HTR_SCAN_SEC,sec,4)                 '' read timer
    if elapsed = 0 then timer(HTR_SCAN_SEC,sec,0)       '' start timer if not running
    ontime = ratio * period
    if ontime < HTR_SCAN_SEC then ontime = 0
    if elapsed > period then timer(HTR_SCAN_SEC,sec,2)  '' restart timer
    if ontime < elapsed and ontime > 0 then state = 1 else state = 0
    portSet(HTR_RELAY__P,state)
endfunction

function gnr_htr_strategy(AT, RH, orifice_T) as float
    '' TODO: DEFINE SOME SORT OF STRATEGY FOR CONTROLLING ORIFICE HEATER 
    '' OUTPUT RATIO SHOULD BE >=0 AND <=1
    return 0
endfunction


BeginProg
    progSig = status.ProgSignature
    gnr_htr_period = HTR_PERIOD_SEC
    init_gnr_calib()

    Scan (10,sec,0,0)
        '' measure vibrating wire cycles since last scan, save as frequency
        pulseCount(g1_F,1,GNR1__PP,0,1,1.0,0)
        pulseCount(g2_F,1,GNR2__PP,0,1,1.0,0)
        pulseCount(g3_F,1,GNR3__PP,0,1,1.0,0)
        
        '' read Geonor wire transducer thermistors:
        BrHalf (X(),3,mV2500,GNR_THERM__SE,GNR_THERM__EX,3,2500,0,0,250,1.0,0)
        For i=1 To 3
            gnr_R(i) = GNR_THERM_REF_R*X(i)/(1-X(i))
        Next i

        '' log the raw wire frequency and thermistor resistance measurements:
        callTable Geonor_raw

        '' update running averages for processing and logging in 60-second scan
        avgRun(gnr_Favg, 3, gnr_F(), 6)
        avgRun(gnr_Ravg, 3, gnr_R(), 6)
    NextScan

    SlowSequence
    Scan(HTR_SCAN_SEC,sec,0,0)
        gnr_orifice_T = read_Geonor_RTD()
        gnr_htr_on_ratio = gnr_htr_strategy(AT, RH, gnr_orifice_T)
        gnr_htr_state = htr_relay_control(gnr_htr_on_ratio, gnr_htr_period)
        callTable(Geonor_heater)
    NextScan

    SlowSequence
    Scan(60,sec,0,0)
        panelTemp(panelTemp,_60Hz)
        battery(battery)

        for i=1 to 3
            '' calculate fluid level in bucket from pulseCount() frequency
            gnr_level(i) = calc_wire_depth(gnr_Favg(i), Kw(i,1), Kw(i,2), Kw(i,3))

            '' calculate wire thermistor temps from averaged resistance:
            gnr_T(i) = calc_therm_T(gnr_Ravg(i), Kt(1), Kt(2), Kt(3))
        next i

        callTable Geonor_data
    NextScan
EndProg
